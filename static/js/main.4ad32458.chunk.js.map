{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","printEnd","path","value","preparedValue","printArray","jsonArray","map","index","console","log","react_default","a","createElement","print","printObject","jsonObject","keys","key","typeElement","object","Array","isArray","undefined","state","handleChange","bind","assertThisInitialized","event","setState","target","list","JSON","parse","e","className","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAkHeA,qBA7Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,SAAW,SAACC,EAAMC,GAChB,GAAc,OAAVA,EACF,MAAO,UAAYD,EAAO,2BAG5B,IAAIE,EAAgBD,EAMpB,MAJoB,kBAAVA,IACRC,EAAgB,IAAOD,EAAQ,KAG1B,UAAYD,EAAO,cAAgBE,EAAgB,MAvBzCV,EA0BnBW,WAAa,SAACH,EAAMI,GAKlB,OAJa,OAATJ,GAA0B,cAATA,GAAiC,KAATA,IAC3CA,EAAO,IAGFI,EAAUC,IAAI,SAACJ,EAAOK,GAE3B,OADAC,QAAQC,IAAIP,GACLQ,EAAAC,EAAAC,cAAA,WACJnB,EAAKoB,MAAMZ,EAAO,IAAMM,EAAQ,IAAKL,OAlCzBT,EAuCnBqB,YAAc,SAACb,EAAMc,GAMnB,OALa,OAATd,GAA0B,cAATA,GAAiC,KAATA,EAC3CA,EAAO,GAEPA,GAAc,IAETP,OAAOsB,KAAKD,GAAYT,IAAI,SAACW,GAAD,OAC/BP,EAAAC,EAAAC,cAAA,WACGnB,EAAKoB,MAAMZ,EAAOgB,EAAIF,EAAWE,QA/CvBxB,EAmDnBoB,MAAQ,SAACZ,EAAMC,GACb,MAAgC,UAA5BT,EAAKyB,YAAYhB,GACZT,EAAKW,WAAWH,EAAMC,GACQ,WAA5BT,EAAKyB,YAAYhB,GACnBT,EAAKqB,YAAYb,EAAMC,GAEvBT,EAAKO,SAASC,EAAMC,IAzDZT,EA6DnByB,YAAc,SAACC,GACb,OAAKC,MAAMC,QAAQF,GACV,QACa,OAAXA,QAA8BG,IAAXH,EACrB,cAEOA,GAjEhB1B,EAAK8B,MAAQ,CAACrB,MAAO,MAErBT,EAAK+B,aAAe/B,EAAK+B,aAAaC,KAAlB/B,OAAAgC,EAAA,EAAAhC,QAAAgC,EAAA,EAAAhC,CAAAD,KAJHA,4EAONkC,GACX/B,KAAKgC,SAAS,CAAC1B,MAAOyB,EAAME,OAAO3B,yCA2EnC,IAAI4B,EAAO,KACPf,EAAa,KACjB,IAECA,EAAagB,KAAKC,MAAMpC,KAAK2B,MAAMrB,OACnC4B,EAAOlC,KAAKiB,MAAM,GAAIE,GACrB,MAAOkB,GACPH,EAAOpB,EAAAC,EAAAC,cAAA,6BAGT,OACEF,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,WAAWjC,MAAON,KAAK2B,MAAMrB,MAAOkC,SAAUxC,KAAK4B,gBAEjEd,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,SAASjC,MAAM,YAG7BQ,EAAAC,EAAAC,cAAA,WAAMkB,WAzGIO,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ad32458.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {value: '{}'};\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n\n  printEnd = (path, value) => {\n    if (value === null) {\n      return '.body(\"' + path + '\", equalTo(nullValue()))';\n    }\n\n    let preparedValue = value;\n\n    if(typeof value === \"string\") {\n      preparedValue = \"\\\"\" + value + \"\\\"\";\n    }\n\n    return '.body(\"' + path + '\", equalTo(' + preparedValue + '))';\n  };\n\n  printArray = (path, jsonArray) => {\n    if (path === null || path === \"undefined\" || path === \"\") {\n      path = \"\";\n    }\n\n    return jsonArray.map((value, index) => {\n      console.log(value);\n      return <div>\n        {this.print(path + \"[\" + index + \"]\", value)}\n      </div>\n    })\n  };\n\n  printObject = (path, jsonObject) => {\n    if (path === null || path === \"undefined\" || path === \"\") {\n      path = \"\";\n    } else {\n      path = path + \".\";\n    }\n    return Object.keys(jsonObject).map((key) =>\n        <div>\n          {this.print(path + key,jsonObject[key])}\n        </div>)\n  };\n\n  print = (path, value) => {\n    if (this.typeElement(value) === \"array\") {\n      return this.printArray(path, value);\n    } else if (this.typeElement(value) === \"object\") {\n      return this.printObject(path, value);\n    } else {\n      return this.printEnd(path, value);\n    }\n  };\n\n  typeElement = (object) => {\n    if ( Array.isArray(object)) {\n      return \"array\";\n    } else if (object === null || object === undefined) {\n      return \"null\";\n    }else {\n      return typeof object;\n    }\n  };\n\n  /**\n   typeof undefined // \"undefined\"\n   typeof 0 // \"number\"\n   typeof true // \"boolean\"\n   typeof \"foo\" // \"string\"\n   typeof Symbol(\"id\") // \"symbol\"\n   typeof Math // \"object\"  (1)\n   typeof null // \"object\"  (2)\n   typeof alert // \"function\"  (3)\n   */\n\n  render() {\n    var list = null;\n    var jsonObject = null\n    try {\n\n     jsonObject = JSON.parse(this.state.value);\n     list = this.print(\"\", jsonObject);\n    } catch (e) {\n      list = <div>not valid json</div>\n    }\n\n    return (\n      <div className=\"App\">\n        <form>\n          <label>\n            Name:\n            <input type=\"textarea\" value={this.state.value} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n        <div>{list}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}